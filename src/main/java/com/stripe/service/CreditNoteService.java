// Generated by com.stripe.generator.entity.SdkBuilder

package com.stripe.service;

import com.stripe.exception.StripeException;
import com.stripe.model.CreditNote;
import com.stripe.model.CreditNoteCollection;
import com.stripe.net.ApiResource;
import com.stripe.net.ApiService;
import com.stripe.net.RequestOptions;
import com.stripe.param.CreditNoteCreateParams;
import com.stripe.param.CreditNoteListParams;
import com.stripe.param.CreditNoteRetrieveParams;
import com.stripe.param.CreditNoteUpdateParams;
import com.stripe.param.CreditNoteVoidCreditNoteParams;

public class CreditNoteService extends ApiService {
  /**
   * Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code>
   * invoice, a credit note reduces its <code>amount_due</code>. For a <code>status=paid</code>
   * invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result in
   * any combination of the following:
   *
   * <ul>
   *   <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund
   *       (using <code>refund</code>).
   *   <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>)
   *       which will be automatically applied to their next invoice when it’s finalized.
   *   <li>Outside of Stripe credit: any positive value from the result of <code>
   *       amount - refund_amount - credit_amount</code> is represented as an “outside of Stripe”
   *       credit.
   * </ul>
   *
   * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the
   * invoice’s <code>pre_payment_credit_notes_amount</code> or <code>
   * post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of
   * credit note creation.
   */
  public CreditNote create(CreditNoteCreateParams params) throws StripeException {
    return create(params, (RequestOptions) null);
  }

  /**
   * Issue a credit note to adjust the amount of a finalized invoice. For a <code>status=open</code>
   * invoice, a credit note reduces its <code>amount_due</code>. For a <code>status=paid</code>
   * invoice, a credit note does not affect its <code>amount_due</code>. Instead, it can result in
   * any combination of the following:
   *
   * <ul>
   *   <li>Refund: create a new refund (using <code>refund_amount</code>) or link an existing refund
   *       (using <code>refund</code>).
   *   <li>Customer balance credit: credit the customer’s balance (using <code>credit_amount</code>)
   *       which will be automatically applied to their next invoice when it’s finalized.
   *   <li>Outside of Stripe credit: any positive value from the result of <code>
   *       amount - refund_amount - credit_amount</code> is represented as an “outside of Stripe”
   *       credit.
   * </ul>
   *
   * <p>You may issue multiple credit notes for an invoice. Each credit note will increment the
   * invoice’s <code>pre_payment_credit_notes_amount</code> or <code>
   * post_payment_credit_notes_amount</code> depending on its <code>status</code> at the time of
   * credit note creation.
   */
  public CreditNote create(CreditNoteCreateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/credit_notes");
    return request(ApiResource.RequestMethod.POST, url, params, CreditNote.class, options);
  }

  /** Returns a list of credit notes. */
  public CreditNoteCollection list(CreditNoteListParams params) throws StripeException {
    return list(params, (RequestOptions) null);
  }

  /** Returns a list of credit notes. */
  public CreditNoteCollection list(CreditNoteListParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/credit_notes");
    return requestCollection(url, params, CreditNoteCollection.class, options);
  }

  /** Retrieves the credit note object with the given identifier. */
  public CreditNote retrieve(String id, CreditNoteRetrieveParams params) throws StripeException {
    return retrieve(id, params, (RequestOptions) null);
  }

  /** Retrieves the credit note object with the given identifier. */
  public CreditNote retrieve(String id, CreditNoteRetrieveParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/credit_notes/%s", id);
    return request(ApiResource.RequestMethod.GET, url, params, CreditNote.class, options);
  }

  /** Updates an existing credit note. */
  public CreditNote update(String id, CreditNoteUpdateParams params) throws StripeException {
    return update(id, params, (RequestOptions) null);
  }

  /** Updates an existing credit note. */
  public CreditNote update(String id, CreditNoteUpdateParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/credit_notes/%s", id);
    return request(ApiResource.RequestMethod.POST, url, params, CreditNote.class, options);
  }

  /**
   * Marks a credit note as void. Learn more about <a
   * href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.
   */
  public CreditNote voidCreditNote(String id, CreditNoteVoidCreditNoteParams params)
      throws StripeException {
    return voidCreditNote(id, params, (RequestOptions) null);
  }

  /**
   * Marks a credit note as void. Learn more about <a
   * href="/docs/billing/invoices/credit-notes#voiding">voiding credit notes</a>.
   */
  public CreditNote voidCreditNote(
      String id, CreditNoteVoidCreditNoteParams params, RequestOptions options)
      throws StripeException {
    String url = resourceUrl("/v1/credit_notes/%s/void", id);
    return request(ApiResource.RequestMethod.POST, url, params, CreditNote.class, options);
  }
}
